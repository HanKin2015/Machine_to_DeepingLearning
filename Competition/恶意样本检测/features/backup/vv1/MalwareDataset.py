from torch.utils.data import Dataset
import os
import cv2
from torchvision import transforms
import pandas as pd
import glob
import torch
 
 
# 定义数据类来读取文件
class MalwareDataset(Dataset):
    def __init__(self, file_path):
        self.root_path = file_path
        self.file_path = []
        self.y_data = []
        self.len = 0
 
        category = 0    # 每种样本的类别(0-1) 所以先黑后白
        for dir_name in os.listdir(self.root_path):
            for file_name in os.listdir(os.path.join(self.root_path, dir_name)):
                self.file_path.append(os.path.join(self.root_path, dir_name, file_name))    # 存储文件路径
                self.y_data.append(category)    # 存储类别
                self.len = self.len + 1
            category += 1
        self.transforms_data = transforms.Compose(
            # [transforms.RandomRotation(-45, 45)],
            [transforms.ToTensor()]
        )
 
    def __getitem__(self, index):
        data_path = self.file_path[index]
        image = cv2.imread(data_path)
        image = cv2.resize(image, (224, 224))
        image = self.transforms_data(image)
 
        return image, self.y_data[index]
 
    def __len__(self):
        return self.len
       
class MalwareTrainDataset(Dataset):
    def __init__(self, file_path):
        self.root_path = file_path
 
        self.file_path = glob.glob(os.path.join(self.root_path, "*.png"))
        train_label_path = os.path.join(self.root_path, "..", "trainLabels.csv")
        df = pd.read_csv(train_label_path)
        self.y_data = get_train_label(self.file_path, df)
        self.len = len(self.file_path)
        self.transforms_data = transforms.Compose([transforms.ToTensor()])
 
    def __getitem__(self, index):
        image = cv2.imread(self.file_path[index])
        image = cv2.resize(image, (224, 224))
        image = self.transforms_data(image)
 
        return image, self.y_data[index]
 
    def __len__(self):
        return self.len
 
 
class MalwareTestDataset(Dataset):
    def __init__(self, file_path):
        self.root_path = file_path
        self.file_path = glob.glob(os.path.join(self.root_path, "*.png"))
        self.len = len(self.file_path)
        self.transforms_data = transforms.Compose(
            [transforms.ToTensor()]
        )
 
    def __getitem__(self, index):
        image = cv2.imread(self.file_path[index])
        image = cv2.resize(image, (224, 224))
        image = self.transforms_data(image)
        file_name = get_file_name(self.file_path[index])
 
        return image, file_name
 
    def __len__(self):
        return self.len
 
 
# 从trainLabels.csv中获得文件名对应的类别
def get_train_label(file_path, df):
    train_label = []
    for fp in file_path:
        file_name = get_file_name(fp)
        train_label.append(df[df["Id"] == file_name]["Class"].astype(int).values[0] - 1)
         
    return torch.Tensor(train_label)
 
 
# 根据文件路径得出不带后缀的文件名
def get_file_name(file_path):
    file_name_begin = file_path.rfind("/")
    file_name_end = file_path.rfind(".")
    file_name = file_path[file_name_begin + 1:file_name_end]
    return file_name